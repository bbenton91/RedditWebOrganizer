[{"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\index.tsx":"1","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\App.tsx":"2","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\serviceWorker.ts":"3","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listings.tsx":"4","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Cookies.ts":"5","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listing.tsx":"6","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Search.tsx":"7"},{"size":459,"mtime":1611042129757,"results":"8","hashOfConfig":"9"},{"size":1730,"mtime":1611521968132,"results":"10","hashOfConfig":"9"},{"size":5278,"mtime":1610868945069,"results":"11","hashOfConfig":"9"},{"size":3395,"mtime":1611521896810,"results":"12","hashOfConfig":"9"},{"size":782,"mtime":1611084877833,"results":"13","hashOfConfig":"9"},{"size":2290,"mtime":1611475440761,"results":"14","hashOfConfig":"9"},{"size":990,"mtime":1611521729395,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o1for7",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\index.tsx",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\App.tsx",["31","32"],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\serviceWorker.ts",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listings.tsx",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Cookies.ts",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listing.tsx",["33"],"import React from 'react';\r\nimport { Cookies } from './Cookies';\r\nimport { ListingData } from './Listings';\r\nimport loadingSpinner from './images/spinner-of-dots.png';\r\n\r\n\r\ntype BodyProps = {\r\n  removeSelf:(id:string) => void\r\n  data:ListingData\r\n}\r\n\r\nexport function Listing({removeSelf, data}:BodyProps) {\r\n\r\n  type ResponseData = {\r\n    success: boolean,\r\n    sessionId: string\r\n  }\r\n\r\n  const [unsaving, setUnsaving] = React.useState<boolean>(false);\r\n\r\n  const redditBaseUrl = \"https://reddit.com/\"\r\n\r\n  const unsaveButton = !unsaving ?\r\n    <button className=\"h-full w-full block rounded\">Unsave</button>\r\n    : <button className=\"h-full w-full rounded flex justify-center items-center\"> <img className=\"rotating w-6 h-6 flex-shrink mr-3\" src={loadingSpinner} alt=\"loading spinner\"></img> <span className=\"\">Unsaving</span></button>\r\n\r\n  const unsavePost = () => {\r\n    setUnsaving(true);\r\n    const fullname = \"t3_\" + data.id; // The fullname of our saved link. t1_ is a comment, t3_ is a link\r\n\r\n    fetch(\"http://127.0.0.1:7070/unsave\", {\r\n      method: 'POST',\r\n      headers: new Headers({ \"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\" }),\r\n      body: JSON.stringify({ \"fullname\": fullname, \"sessionId\": Cookies.getCookie(\"sessionId\") })\r\n    }).then(response => response.text())\r\n      .then(responseData => {\r\n        var obj: ResponseData = JSON.parse(responseData); // Parse the json\r\n        if(obj.success)\r\n          removeSelf(data.id);\r\n        setUnsaving(false)\r\n        Cookies.addCookie(\"sessionId\", obj.sessionId);\r\n    })\r\n  }\r\n\r\n  const title = (title: string) => {\r\n    var length = 800\r\n    return title.length > length ? title.substr(0, length-3) + \"...\" : title\r\n  }\r\n  \r\n  return <div className=\"listing w-full bg-gray-400 mb-2 h-14 flex\">\r\n    <div className=\"flex-grow flex-1 text-lg pl-1 pr-1\">{title(data.title)}</div>\r\n    <div className=\"w-1/12 bg-gray-600 mr-2\"><a href={data.url}><button className=\"h-full w-full block rounded\">To Link</button></a></div>\r\n    <div className=\"w-1/12 bg-gray-600 mr-2\"><a href={redditBaseUrl+data.permalink}><button className=\"h-full w-full block rounded\">To Permalink</button></a></div>\r\n    <div className=\"w-1/12 bg-gray-600\"><a onClick={unsavePost}>{ unsaveButton }</a></div>\r\n  </div>\r\n}","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Search.tsx",["34"],{"ruleId":"35","severity":1,"message":"36","line":21,"column":9,"nodeType":"37","messageId":"38","endLine":21,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":24,"column":8,"nodeType":"37","messageId":"38","endLine":24,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":54,"column":41,"nodeType":"42","endLine":54,"endColumn":65},{"ruleId":"35","severity":1,"message":"43","line":1,"column":17,"nodeType":"37","messageId":"38","endLine":1,"endColumn":31},"@typescript-eslint/no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","'ResponseData' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SyntheticEvent' is defined but never used."]