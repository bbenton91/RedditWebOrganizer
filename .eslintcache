[{"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\index.tsx":"1","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\App.tsx":"2","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\serviceWorker.ts":"3","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listings.tsx":"4","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Cookies.ts":"5","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listing.tsx":"6","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Search.tsx":"7","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\LoadingButton.tsx":"8"},{"size":459,"mtime":1611042129757,"results":"9","hashOfConfig":"10"},{"size":2155,"mtime":1611611256019,"results":"11","hashOfConfig":"10"},{"size":5278,"mtime":1610868945069,"results":"12","hashOfConfig":"10"},{"size":3351,"mtime":1611609066220,"results":"13","hashOfConfig":"10"},{"size":782,"mtime":1611084877833,"results":"14","hashOfConfig":"10"},{"size":2817,"mtime":1611656083967,"results":"15","hashOfConfig":"10"},{"size":2010,"mtime":1611632978999,"results":"16","hashOfConfig":"10"},{"size":614,"mtime":1611553081787,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o1for7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\index.tsx",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\App.tsx",["36"],"import React from 'react';\nimport { Cookies } from './Cookies';\nimport { Listings, ListProps } from './Listings';\nimport {Search, SearchProps} from './Search'\n\n\nexport type ListingData = {\n  title: string,\n  url: string,\n  permalink: string,\n  id: string,\n  is_self: boolean,\n  author: string,\n  subreddit: string\n}\n\nexport function App() {\n\n  const appId = \"C6iDiQaoPTwgVw\"\n  const redirect = \"http://localhost:3000\"\n  const scope = \"identity,save,history\"\n\n  const url = `https://www.reddit.com/api/v1/authorize?client_id=${appId}&response_type=code&\nstate=#rs&redirect_uri=${redirect}&duration=permanent&scope=${scope}`;\n\n  type ResponseData = {\n    data: Array<ListingData>,\n    sessionId:string\n  }\n\n  const [data, setData] = React.useState<Array<ListingData>>([]);\n  const [filteredData, setFilteredData] = React.useState<Array<ListingData>>([]);\n\n  const setAllData: (newData:Array<ListingData>) => void = newData => {\n    setData(newData);\n    setFilteredData(newData);\n  }\n\n  const authorize = () => {\n    // Replace our state code. This should be uniquee every request and checked when we return\n    var newUrl: string = url.replace(\"#rs\", \"something\")\n    window.location.href = newUrl;\n  }\n  \n  const clearAuthorize = () => {\n    Cookies.clearCookie(\"sessionId\");\n    setAllData([]);\n  }\n\n  const params = new URLSearchParams(window.location.search)\n  \n  if (params.get(\"code\") != null) {\n    Cookies.addCookie(\"token\", params.get(\"code\")!);\n    // window.location.replace(\"http://localhost:3000\")\n    window.history.replaceState(null, \"React App\", \"/\")\n  }\n\n\n  const listingProps:ListProps = {url:\"\", filteredData: filteredData, setDataCallback: setAllData, authorizeCallback: authorize}\n  const searchProps: SearchProps = {originalData: data, setFilteredDataCallback: setFilteredData}\n\n  return <div className=\"flex flex-col h-full items-center justify-center text-white bg-gradient-to-br from-gray-600 via-teal-700 to-gray-800\">\n    <h1 className=\"text-5xl mb-5\">Reddit Organizer</h1>\n    <button onClick={clearAuthorize}>Logout</button>\n    <Search  {...searchProps}/>\n    <Listings {...listingProps} />\n    </div>\n}\n\n\nexport default App;\n","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\serviceWorker.ts",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listings.tsx",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Cookies.ts",[],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Listing.tsx",["37","38"],"C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\Search.tsx",["39"],"import React, { SyntheticEvent } from 'react';\r\nimport {ListingData} from './App'\r\n\r\nexport type SearchProps = {\r\n  originalData: Array<ListingData>\r\n  setFilteredDataCallback: (data: Array<ListingData>) => void\r\n}\r\n\r\nexport function Search(props: SearchProps) {\r\n\r\n  var delayedFilter: NodeJS.Timeout;\r\n\r\n  const filter = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    console.log(e.currentTarget.value);\r\n    const text = e.currentTarget.value;\r\n\r\n    if (text === \"\") {\r\n      props.setFilteredDataCallback(props.originalData);\r\n      return;\r\n    }\r\n\r\n    clearTimeout(delayedFilter); // Clear the last timeout (if any)\r\n    delayedFilter = setTimeout(() => { // Then search on a delay\r\n      var regex = new RegExp(text, 'gmi')\r\n      props.setFilteredDataCallback(props.originalData.filter(item => item.title.match(regex) || item.author.match(regex) || item.subreddit.match(regex)));\r\n      console.log(\"filtered\")\r\n    }, 1000)\r\n\r\n  }\r\n\r\n  return <div className=\"flex flex-col items-center mb-4\"> \r\n    <input onChange={filter} className=\"mb-2 text-black pl-1 pr-1 w-60\" type=\"text\" name=\"searchbar\" id=\"\" />\r\n\r\n    <div className=\"flex space-x-10\">\r\n      <div className=\"flex flex-col items-center\">\r\n      <label htmlFor=\"searchTitle\">Search Title</label>\r\n      <input className=\"w-4 h-4\" type=\"checkbox\" id=\"searchTitle\" name=\"searchTitle\" value=\"Title\" checked={true}></input>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col items-center\">\r\n      <label htmlFor=\"searchTitle\">Search Subreddit</label>\r\n          <input className=\"w-4 h-4\" type=\"checkbox\" id=\"searchSubreddit\" name=\"searchSubreddit\" value=\"Subreddit\" checked={true}></input>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col items-center\">\r\n      <label htmlFor=\"searchTitle\">Search Author</label>\r\n      <input className=\"w-4 h-4\" type=\"checkbox\" id=\"searchAuthor\" name=\"searchAuthor\" value=\"Author\" checked={true}></input>\r\n      </div>\r\n    </div>\r\n    \r\n    \r\n    \r\n    \r\n    </div> \r\n  \r\n}","C:\\Users\\Brad\\Desktop\\AllProjectFiles_1-13-2021\\AllProjectFiles\\Web\\react\\reddit-organizer\\src\\LoadingButton.tsx",[],{"ruleId":"40","severity":1,"message":"41","line":26,"column":8,"nodeType":"42","messageId":"43","endLine":26,"endColumn":20},{"ruleId":"40","severity":1,"message":"44","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":66,"column":35,"nodeType":"47","endLine":66,"endColumn":59},{"ruleId":"40","severity":1,"message":"48","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":31},"@typescript-eslint/no-unused-vars","'ResponseData' is defined but never used.","Identifier","unusedVar","'loadingSpinner' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SyntheticEvent' is defined but never used."]